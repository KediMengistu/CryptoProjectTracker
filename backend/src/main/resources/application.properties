spring.application.name=backend

# --- R2DBC (app data access) ---
spring.r2dbc.url=r2dbc:postgresql://${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT}/${SUPABASE_DB_NAME}?ssl=true&sslMode=${SUPABASE_SSLMODE}&connectTimeout=PT15S
spring.r2dbc.username=${SUPABASE_DB_USER}
spring.r2dbc.password=${SUPABASE_DB_PASSWORD}

# Enable R2DBC connection pooling
spring.r2dbc.pool.enabled=true

# R2DBC pool hardening
spring.r2dbc.pool.initial-size=0
spring.r2dbc.pool.max-size=20
spring.r2dbc.pool.max-idle-time=30s
spring.r2dbc.pool.max-acquire-time=30s
spring.r2dbc.pool.max-create-connection-time=30s
spring.r2dbc.pool.validation-depth=REMOTE
spring.r2dbc.pool.validation-query=SELECT 1

# --- Flyway (JDBC for migrations) ---
spring.flyway.url=jdbc:postgresql://${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT}/${SUPABASE_DB_NAME}?sslmode=${SUPABASE_SSLMODE}
spring.flyway.user=${SUPABASE_DB_USER}
spring.flyway.password=${SUPABASE_DB_PASSWORD}

# Don?t let Spring run SQL init if you rely on Flyway
spring.sql.init.mode=never

# resolve from env; fail fast if base URL is missing
coingecko.base-url=${COINGECKO_BASE_URL}
# api key is optional; allow empty if not set
coingecko.api-key=${COINGECKO_API_KEY:}

# --- Feed composition knobs ---
coins.fallback.ids=bitcoin,ethereum,solana,avalanche-2,cardano,dogecoin,polkadot,chainlink,cosmos,litecoin,internet-computer,near,arbitrum,aptos,sui
coins.fallback.prune-extraneous=true
coins.feed.target-size=15
coins.feed.max-fallback-staleness-hours=168

# Let Cloud Run inject the port
server.port=${PORT:8080}

# (Optional) expose actuator health if you want
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true
